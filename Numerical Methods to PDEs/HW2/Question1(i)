
import math
import numpy as np
import matplotlib.pyplot as plt
import scipy

MinX=-2;
MaxX=3;
MinT=0;
MaxT=2.4;
h=1/40.0;
Lamuda=0.8;

k=Lamuda*h;
Beita=4*h/k;

NumberOfPtX=(MaxX-MinX)/h+1;
NumberOfPtT=(MaxT-MinT)/k+1;
NumberOfPtX=round(NumberOfPtX);
NumberOfPtT=round(NumberOfPtT);
NumberOfPtX=int(NumberOfPtX);
NumberOfPtT=int(NumberOfPtT);

a=[[0 for x in range(int(NumberOfPtX))] for y in range(int(NumberOfPtT))]
Exact=[[0 for x in range(int(NumberOfPtX))] for y in range(int(NumberOfPtT))]
Error=[[0 for x in range(int(NumberOfPtX))] for y in range(int(NumberOfPtT))]
FactorMatrix=[[0 for x in range(int(NumberOfPtX)-2)] for y in range(int(NumberOfPtX)-2)]
Vector=[0 for y in range(int(NumberOfPtX)-2)]
del x;
del y;

"""" a[y][x]  remember x is the element of y , y is larger and in front """
"""" This is also an initilization of the matrix  """


XrangeMin=-1.;
XrangeMax=1.; 
XminPoint=(XrangeMin-MinX)/h+1;
XmaxPoint=(XrangeMax-MinX)/h+1;
XminPoint=round(XminPoint);
XmaxPoint=round(XmaxPoint);

for i in range ((int(XminPoint)-1),int(XmaxPoint)):
    """"can get the boundary of initial data of X Point"""
    x=MinX+i*h;
    a[0][i]=1+x

del i;

"""" Initilization of Essential BC in X  """



FactorMatrix[0][0]=Beita;
FactorMatrix[0][1]=1;
FactorMatrix[int(NumberOfPtX)-3][int(NumberOfPtX)-4]=-1;
FactorMatrix[int(NumberOfPtX)-3][int(NumberOfPtX)-3]=Beita+1;
for i in range (1,int(NumberOfPtX)-3):
    FactorMatrix[i][i-1]=-1;
    FactorMatrix[i][i]=Beita;
    FactorMatrix[i][i+1]=1;
del i ;


for i in range (1,int(NumberOfPtT)):
    Vector[0]=Beita*a[i-1][1]-a[i-1][2]
    Vector[int(NumberOfPtX)-3]=a[i-1][int(NumberOfPtX)-3]+(Beita-1)*a[i-1][int(NumberOfPtX)-2]
    for j in range(1,int(NumberOfPtX)-3):
        Vector[j]=a[i-1][j]+Beita*a[i-1][j+1]-a[i-1][j+2]
    del j;
    Interim=np.linalg.solve(FactorMatrix, Vector)
    for j in range(0,int(NumberOfPtX)-2):
        a[i][j+1]=Interim[j];
    a[i][int(NumberOfPtX)-1]=a[i][int(NumberOfPtX)-2]
del i;
    
"""" Calculation of the grid point using the scheme  """

for i in range (0,NumberOfPtT):
    for j in range (0,NumberOfPtX):
        t=MinT+i*k;
        x=MinX+j*h;
        if ((abs(x-t))<=1):
            Exact[i][j]=1+x-t;
            Error[i][j]=Exact[i][j]-a[i][j];
            
"""" Calculation of the exact solution  """

  
Xaxis=np.linspace(MinX,MaxX,NumberOfPtX)

Time1=0;
Time2=0.8;
Time3=1.6;
Time4=2.4;

TPoint1=(Time1-MinT)/k+1;
TPoint2=(Time2-MinT)/k+1;
TPoint3=(Time3-MinT)/k+1;
TPoint4=(Time4-MinT)/k+1;

plt.figure(4);
plt.subplot(121)
p1,= plt.plot(Xaxis,a[int(TPoint1)-1]);
p2,= plt.plot(Xaxis,Error[int(TPoint1)-1]);
plt.legend([p1,p2],['Numerical Solution','Error'],loc='upper right')
plt.xlabel('x in Space')
plt.ylabel('Solution Value')
plt.title('T=0s Lamuda=0.8 h=1/40');
plt.subplot(122)
p3,= plt.plot(Xaxis,a[int(TPoint2)-1]);
p4,= plt.plot(Xaxis,Error[int(TPoint2)-1]);
plt.legend([p3,p4],['Numerical Solution','Error'],loc='upper right')
plt.xlabel('x in Space')
plt.ylabel('Solution Value')
plt.title('T=0.8s Lamuda=0.8 h=1/40');

plt.show()
